{"version":3,"sources":["components/game/GrabBag.js","components/ui/GameButton.js","components/game/Quickstarter.js","components/Chatbox.js","components/Game.js","Helper.js"],"names":["makeStyles","theme","removeLinkStyling","color","textDecoration","fontWeight","GrabBag","useStyles","questionText","height","width","borderRadius","textShadow","fontSize","transition","questionCard","background","disabledQuestionCard","correctQuestionCard","wrongQuestionCard","GameButton","props","classes","buttonText","buttonIndex","correctAnswer","showAnswer","useState","selected","setSelected","cardClass","setCardClass","determineCardClass","useEffect","Paper","className","Button","onClick","e","questionGrid","Quickstarter","questionsReady","setQuestionsReady","questions","setQuestions","currQuestion","setCurrQuestion","setShowAnswer","setCorrectAnswer","handleClick","ansIndex","a","checkAnswer","answers","id","response","indexOf","decodeURIComponent","replace","length","setTimeout","getTriviaQuestions","category","numQuestions","difficulty","console","log","populateDisplayQuestions","style","Grid","container","spacing","item","xs","Typography","variant","padding","question","Chatbox","nick","setNick","message","setMessage","messageLog","setMessageLog","hubConnection","setHubConnection","ready","setReady","currNick","window","prompt","newConnection","signalR","withUrl","build","start","then","catch","err","on","receivedMessage","text","messages","concat","type","value","onChange","target","invoke","error","map","index","display","key","Game","minigame","players","setPlayers","roomCode","match","params","code","getSessionMembers","data","fetchData","player","i","Card","url","axios","get","JSON","parse","answer","joinRoom","name","room","Promise","resolve","status"],"mappings":"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","file":"static/js/8.d6e1b885.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n      },\r\n}));\r\n\r\nfunction GrabBag(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n                \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GrabBag;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, Card, Paper } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n      },\r\n    questionText: {\r\n        height: '100%',\r\n        width: '100%',\r\n        color: \"white\",\r\n        borderRadius: '0px',\r\n        textShadow: '0px 0px 5px black',\r\n        fontSize: '0.925rem',\r\n        transition: \"background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\r\n    },\r\n    questionCard: {\r\n        height: '150px',\r\n        width: '100%',\r\n        background: \"linear-gradient(90deg, rgba(3,252,248,1) 0%, rgba(0,138,251,1) 100%)\",\r\n    },\r\n    disabledQuestionCard: {\r\n        height: '150px',\r\n        width: '100%',\r\n        background: \"linear-gradient(90deg, rgba(3,252,248,1) 0%, rgba(0,138,251,1) 100%)\",\r\n    },\r\n    correctQuestionCard: {\r\n        height: '150px',\r\n        width: '100%',\r\n        background: \"radial-gradient(circle, rgb(3,252,48,1) 0%, rgba(0,88,33,1) 100%)\",\r\n    },\r\n    wrongQuestionCard: {\r\n        height: '150px',\r\n        width: '100%',\r\n        background: \"radial-gradient(circle, rgba(248,3,3,1) 0%, rgba(88,0,0,1) 100%)\",\r\n    },\r\n}));\r\n\r\nfunction GameButton(props) {\r\n    const classes = useStyles();\r\n    const buttonText = props.buttonText;\r\n    const buttonIndex = props.buttonIndex;\r\n    var correctAnswer = props.correctAnswer;\r\n    var showAnswer = props.showAnswer;\r\n    const [selected, setSelected] = useState(false);\r\n    const [cardClass, setCardClass] = useState();\r\n\r\n    const determineCardClass = () => {\r\n        if (showAnswer && correctAnswer === buttonIndex) {\r\n            setCardClass(classes.correctQuestionCard);\r\n        } else if (showAnswer && selected && (buttonIndex !== correctAnswer)) {\r\n            setCardClass(classes.wrongQuestionCard);\r\n        } else if (showAnswer && !selected) {\r\n            setCardClass(classes.disabledQuestionCard);\r\n        } else {\r\n            setCardClass(classes.questionCard);\r\n        }\r\n    }\r\n\r\n    // useEffect( () => {\r\n    //     const determineCardClass = () => {\r\n    //         console.log(props)\r\n    //         console.log(selected)\r\n    //         if (showAnswer && correctAnswer === buttonIndex) {\r\n    //             setCardClass(classes.correctQuestionCard);\r\n    //         } else if (showAnswer && selected && (buttonIndex !== correctAnswer)) {\r\n    //             setCardClass(classes.wrongQuestionCard);\r\n    //         } else {\r\n    //             setCardClass(classes.questionCard);\r\n    //         }\r\n    //     }\r\n    //     if (selected) {\r\n    //         determineCardClass();\r\n    //         setSelected(false);\r\n    //     }\r\n    // }, [selected])\r\n\r\n    const onClick = (e) => {\r\n        if (showAnswer) return;\r\n        setSelected(true);\r\n        props.onClick();\r\n        determineCardClass();\r\n    }\r\n\r\n    useEffect(() => {\r\n        determineCardClass();\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (correctAnswer === -1) {\r\n            setSelected(false);\r\n        }\r\n    }, [correctAnswer]);\r\n\r\n    return (\r\n        <div>\r\n            <Paper className={cardClass}>\r\n                <Button className={classes.questionText} onClick={(e) => onClick(e)}>{buttonText}</Button>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameButton;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, Grid, Card, Typography } from '@material-ui/core';\r\nimport { getTriviaQuestions, getCategoryOptions, checkAnswer } from '../../Helper';\r\nimport GameButton from '../ui/GameButton';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n    },\r\n    questionGrid: {\r\n    },\r\n    questionCard: {\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    questionText: {\r\n        height: '100%',\r\n        width: '100%',\r\n        textShadow: '0px 0px 5px black',\r\n    }\r\n}));\r\n\r\nfunction decodeEntities(text) {\r\n    var str = decodeURIComponent(text).replace(\"%2C\", \",\");\r\n\r\n    return str;\r\n}\r\n\r\nfunction Quickstarter(props) {\r\n    const classes = useStyles();\r\n    const [questionsReady, setQuestionsReady] = useState(false);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currQuestion, setCurrQuestion] = useState(0);\r\n    const [showAnswer, setShowAnswer] = useState(false);\r\n    const [correctAnswer, setCorrectAnswer] = useState(-1);\r\n\r\n    const handleClick = async (ansIndex) => {\r\n        var response = await checkAnswer(questions[currQuestion].answers[ansIndex], questions[currQuestion].id);\r\n        setCorrectAnswer((questions[currQuestion].answers.indexOf(decodeEntities(response))));\r\n        setShowAnswer(true);\r\n\r\n        // setCorrectAnswer((questions[currQuestion].answers.indexOf(decodeEntities(questions[currQuestion].correct_answer))));\r\n\r\n        // // console.table(questions);\r\n        // // console.log(\"currque:\" + currQuestion);\r\n        // console.log(\"correct:\" + correctAnswer);\r\n        // console.log(\"question: \" + decodeEntities(questions[currQuestion].answers[ansIndex]));\r\n        // console.log(\"answer: \" + decodeEntities(questions[currQuestion].correct_answer));\r\n\r\n        // if (decodeEntities(questions[currQuestion].answers[ansIndex]) === decodeEntities(questions[currQuestion].correct_answer)) {\r\n        //     console.log(\"correct\");\r\n        //     // TODO: Send to server to record points\r\n        // } else {\r\n        //     console.log(\"incorrect\");\r\n        // }\r\n        // TODO: This will need to be set either on a countdown or when all answers have been received from the players\r\n        if (currQuestion < questions.length - 1) {\r\n            setTimeout(() => {\r\n                setShowAnswer(false);\r\n                setCorrectAnswer(-1);\r\n                setCurrQuestion(currQuestion + 1);\r\n            }, 3000);\r\n        }\r\n        \r\n    }\r\n\r\n    const populateDisplayQuestions = async () => {\r\n        var response = await getTriviaQuestions({ category: \"Entertainment\", numQuestions: 4, difficulty: \"medium\" });\r\n        console.log(response)\r\n        // if (response.data.response_code !== 0) {\r\n        //     // TODO: Handle error codes\r\n        //     console.log('Error retrieving questions from the API');\r\n        // }\r\n        // var results = response.data.results;\r\n        //setQuestions(results);\r\n        setQuestions(response);\r\n        setQuestionsReady(true);\r\n    }\r\n\r\n\r\n\r\n    /*useEffect(() => {\r\n        const tick = setTimeout(() => {\r\n            populateDisplayQuestions();\r\n        }, 2000);\r\n        //return () => clearInterval(tick)\r\n    })*/\r\n    useEffect(() => {\r\n        const populateDisplayQuestions = async () => {\r\n            var response = await getTriviaQuestions({ category: \"Entertainment\", numQuestions: 4, difficulty: \"medium\" });\r\n            console.log(response)\r\n            // if (response.data.response_code !== 0) {\r\n            //     // TODO: Handle error codes\r\n            //     console.log('Error retrieving questions from the API');\r\n            // }\r\n            // var results = response.data.results;\r\n            //setQuestions(results);\r\n            setQuestions(response);\r\n            setQuestionsReady(true);\r\n        }\r\n        if (!questionsReady) {\r\n            populateDisplayQuestions()\r\n        }\r\n    }, [questionsReady]);\r\n\r\n    return (\r\n        <div>\r\n            { questions.length > 0 ?\r\n            <>\r\n            <div style={{ width: '100%', height: '30%'}}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6} className={classes.questionGrid}>\r\n                        {/* <Card className={showAnswer && correctAnswer === 0 ? classes.correctQuestionCard : classes.questionCard}>\r\n                            <Button className={classes.questionText} onClick={() => handleClick(0)}>{questions[currQuestion].answers[0]}</Button>\r\n                        </Card> */}\r\n                        <GameButton correctAnswer={correctAnswer} showAnswer={showAnswer} buttonIndex={0} buttonText={questions[currQuestion].answers[0]} onClick={() => handleClick(0)}></GameButton>\r\n                    </Grid>\r\n                    <Grid item xs={6} className={classes.questionGrid}>\r\n                        {/* <Card className={showAnswer && correctAnswer === 1 ? classes.correctQuestionCard : classes.questionCard}>\r\n                            <Button className={classes.questionText} onClick={() => handleClick(1)}>{questions[currQuestion].answers[1]}</Button>\r\n                        </Card> */}\r\n                        <GameButton correctAnswer={correctAnswer} showAnswer={showAnswer} buttonIndex={1} buttonText={questions[currQuestion].answers[1]} onClick={() => handleClick(1)}></GameButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <Typography variant='h4' style={{padding: 40}}>{questions[currQuestion].question}</Typography>\r\n            <div style={{ width: '100%', height: '30%' }}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6} className={classes.questionGrid}>\r\n                        {/* <Card className={showAnswer && correctAnswer === 2 ? classes.correctQuestionCard : classes.questionCard}>\r\n                            <Button className={classes.questionText} onClick={() => handleClick(2)}>{questions[currQuestion].answers[2]}</Button>\r\n                        </Card> */}\r\n                        <GameButton correctAnswer={correctAnswer} showAnswer={showAnswer} buttonIndex={2} buttonText={questions[currQuestion].answers[2]} onClick={() => handleClick(2)}></GameButton>\r\n                    </Grid>\r\n                    <Grid item xs={6} className={classes.questionGrid}>\r\n                        {/* <Card className={showAnswer && correctAnswer === 3 ? classes.correctQuestionCard : classes.questionCard}>\r\n                            <Button className={classes.questionText} onClick={() => handleClick(3)}>{questions[currQuestion].answers[3]}</Button>\r\n                        </Card> */}\r\n                        <GameButton correctAnswer={correctAnswer} showAnswer={showAnswer} buttonIndex={3} buttonText={questions[currQuestion].answers[3]} onClick={() => handleClick(3)}></GameButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            </>\r\n            : ''}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quickstarter;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport * as signalR from '@microsoft/signalr';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n      },\r\n}));\r\n\r\nfunction Chatbox(props) {\r\n    const classes = useStyles();\r\n    const [nick, setNick] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messageLog, setMessageLog] = useState([]);\r\n    const [hubConnection, setHubConnection] = useState(null);\r\n    const [ready, setReady] = useState(false);\r\n\r\n    const sendMessage = () => {\r\n        hubConnection.invoke('sendToAll', nick, message)\r\n                                    .catch(err => console.error(err));\r\n      \r\n        setMessage('');\r\n      };\r\n\r\n    useEffect(() => {\r\n        if (!ready) {\r\n            const currNick = window.prompt('Your name:', 'Bicki');\r\n\r\n            const newConnection = new signalR.HubConnectionBuilder().withUrl(\"/chathub\").build();\r\n\r\n            setNick(currNick);\r\n\r\n            newConnection.start()\r\n                                        .then(() => console.log('Connection started!'))\r\n                                        .catch(err => console.log('Error establishing connection'));\r\n\r\n            newConnection.on('sendToAll', (nick, receivedMessage) => {\r\n                const text = `${nick}: ${receivedMessage}`;\r\n                const messages = messageLog;\r\n                messages.concat([text]);\r\n                setMessageLog(messages);\r\n            });\r\n\r\n            setHubConnection(newConnection);\r\n            setReady(true);\r\n        }\r\n      }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <br />\r\n                <input\r\n                type=\"text\"\r\n                value={message}\r\n                onChange={e => setMessage(e.target.value)}\r\n                />\r\n\r\n                <button onClick={() => sendMessage()}>Send</button>\r\n\r\n                <div>\r\n                {messageLog.map((message, index) => (\r\n                    <span style={{display: 'block'}} key={index}> {message} </span>\r\n                ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chatbox;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Card, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GrabBag from './game/GrabBag';\r\nimport Quickstarter from './game/Quickstarter';\r\nimport Chatbox from './Chatbox';\r\nimport { getSessionMembers } from '../Helper';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n      },\r\n}));\r\n\r\nfunction Game(props) {\r\n    const classes = useStyles();\r\n    const minigame = <Quickstarter/>;\r\n    const [players, setPlayers] = useState([]);\r\n    const roomCode = props.match.params.code;\r\n\r\n    useEffect(() => {\r\n        const fetchData = async (roomCode) => {\r\n            setPlayers((await getSessionMembers(roomCode)).data.value);\r\n        };\r\n\r\n        fetchData(roomCode);\r\n    }, [roomCode]);\r\n\r\n    return (\r\n        <div>\r\n            <div style={{width: '80vw'}}>\r\n            {minigame}\r\n            </div>\r\n            <Grid container spacing={3}>\r\n                {players.map((player, i) => \r\n                    <Grid item xs={3} key={i}>\r\n                        <Card>{player}</Card>\r\n                    </Grid>\r\n                    )}\r\n                <Grid item xs={3} key={\"dab\"}>\r\n                    <Chatbox />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://localhost:44302';\r\n// Open Trivia DB Categories\r\nconst categories = {\r\n    'General Knowledge': 9,\r\n    'Books': 10,\r\n    'Film': 11,\r\n    'Music': 12,\r\n    'Musicals & Plays': 13,\r\n    'Television': 14,\r\n    'Video Games': 15,\r\n    'Board Games': 16,\r\n    'Science and Nature': 17,\r\n    'Computers': 18,\r\n    'Mathematics': 19,\r\n    'Mythology': 20,\r\n    'Sports': 21,\r\n    'Geography': 22,\r\n    'History': 23,\r\n    'Politics': 24,\r\n    'Art': 25,\r\n    'Celebrities': 26,\r\n    'Animals': 27,\r\n    'Vehicles': 28,\r\n    'Comics': 29,\r\n    'Gadgets': 30,\r\n    'Japanese Anime & Manga': 31,\r\n    'Cartoon & Animation': 32\r\n\r\n};\r\n\r\n// Open Trivia API Calls\r\nconst getTriviaQuestions = async ({category, numQuestions=1, difficulty, type='multiple'}) => {\r\n    //var url = `https://opentdb.com/api.php?amount=${numQuestions}`;\r\n    var url = `${BASE_URL}/api/Quickstarter/Get?numQuestions=${numQuestions}`\r\n    if (category) {\r\n        url += `&category=${category}`;\r\n    }\r\n    if (difficulty) {\r\n        url += `&difficulty=${difficulty}`;\r\n    }\r\n    //url += `&type=${type}&encode=url3986`;\r\n    var response = await axios.get(url);\r\n    for (var i = 0; i < numQuestions; i++) {\r\n        response.data[i].answers = JSON.parse(response.data[i].answers);\r\n    }\r\n    return response.data;\r\n\r\n    // TODO: This will be done on the server side and return a DTO\r\n    // var results = response.data.results;\r\n    // for (var i = 0; i < results.length; i++) {\r\n    //     results[i].question = decodeURIComponent(results[i].question);\r\n    //     results[i].answers = [];\r\n    //     var randomInsertIndex = randomInteger(0, 2);\r\n    //     for (var j = 0; j < results[i].incorrect_answers.length; j++) {\r\n    //         results[i].answers.push(decodeURIComponent(results[i].incorrect_answers[j]));\r\n    //     }\r\n    //     results[i].answers.splice(randomInsertIndex, 0, decodeURIComponent(results[i].correct_answer));\r\n    // }\r\n    // response.data.results = results;\r\n    // return Promise.resolve(response);\r\n}\r\n\r\nconst checkAnswer = async (answer, id) => {\r\n    var url = `${BASE_URL}/api/Quickstarter/Check?id=${id}`;\r\n    var response = await axios.get(url);\r\n    return (response.data);\r\n}\r\n\r\n// Returns an integer random number between min (included) and max (included):\r\nfunction randomInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst getCategoryOptions = (numOptions) => {\r\n    var options = new Set();\r\n    while (options.size !== numOptions) {\r\n        options.add(Object.keys(categories).find(key => categories[key] === randomInteger(9, 32)));\r\n    }\r\n    return options;\r\n}\r\n\r\n// Mock API helper functions\r\nconst joinRoom = async (name, room) => {\r\n    //call server, try to add person to room\r\n    console.log(`[JOINING ROOM] Name: ${name}, Room code: ${room}`);\r\n    return Promise.resolve({status: 200, data: {}});\r\n}\r\n\r\nconst getSessionMembers = async (room) => {\r\n    // Get all current room members from server\r\n    console.log(`[GETTING MEMBERS] Room code: ${room}`);\r\n    return Promise.resolve({\r\n        status: 200,\r\n        data: {\r\n            value: [\r\n                'Nik',\r\n                'Siena',\r\n                'Filip'\r\n            ]\r\n        }\r\n    });\r\n}\r\n\r\nexport {\r\n    getTriviaQuestions,\r\n    checkAnswer,\r\n    getCategoryOptions,\r\n    joinRoom,\r\n    getSessionMembers\r\n};"],"sourceRoot":""}