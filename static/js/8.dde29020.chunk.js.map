{"version":3,"sources":["components/setup/Room.js","Helper.js"],"names":["useStyles","makeStyles","theme","removeLinkStyling","color","textDecoration","fontWeight","member","padding","width","height","Room","props","code","useParams","classes","useState","name","setName","joined","setJoined","Array","sessionMembers","setSessionMembers","handleJoin","e","a","preventDefault","joinRoom","useEffect","roomCode","getSessionMembers","data","value","fetchData","console","table","container","spacing","item","xs","className","to","variant","onClick","onSubmit","margin","htmlFor","id","onChange","target","type","categories","getTriviaQuestions","category","numQuestions","difficulty","url","axios","get","response","results","i","length","question","decodeURIComponent","answers","randomInsertIndex","randomInteger","j","incorrect_answers","push","splice","correct_answer","Promise","resolve","min","max","Math","floor","random","room","log","status"],"mappings":"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","file":"static/js/8.dde29020.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { Input, InputLabel, FormControl, TextField, Grid, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useParams } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { joinRoom, getSessionMembers } from '../../Helper.js';\r\n// import { Grid, Paper } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n      },\r\n    member: {\r\n        padding: 30,\r\n        width: '50%',\r\n        height: '30%',\r\n    }\r\n}));\r\nfunction Room(props) {\r\n    const {code} = useParams();\r\n    const classes = useStyles();\r\n    const [name, setName] = useState(\"\");\r\n    const [joined, setJoined] = useState(false);\r\n    const [sessionMembers, setSessionMembers] = useState(new Array(4));\r\n\r\n    const handleJoin = async (e) => {\r\n        e.preventDefault();\r\n        var resp = await joinRoom(name, code);\r\n        // TODO: Check if success\r\n        setJoined(true);\r\n    }\r\n\r\n    const startGame = (e) => {\r\n        //console.log(\"started\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async (roomCode) => {\r\n            setSessionMembers((await getSessionMembers(roomCode)).data.value);\r\n        };\r\n\r\n        fetchData(code);\r\n        //console.log('fetched');\r\n    }, [code, joined]);\r\n\r\n    useEffect(() => {\r\n        console.table(sessionMembers);\r\n    }, [sessionMembers]);\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} className={classes.member}>{sessionMembers[0]}</Grid>\r\n                <Grid item xs={6} className={classes.member}>{sessionMembers[1]}</Grid>\r\n            </Grid>\r\n            <h1>Current game code is {code}</h1>\r\n            { !joined ?\r\n            <form onSubmit={handleJoin}>\r\n            <FormControl className={classes.margin}>\r\n                <InputLabel htmlFor=\"input-username\">Name</InputLabel>\r\n                <Input\r\n                    id=\"input-username\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                />\r\n            </FormControl>\r\n            <Button variant=\"contained\" type=\"submit\">Join</Button>\r\n            </form>\r\n            : <Link to={\"/game/\" + code} className={classes.removeLinkStyling}><Button variant=\"contained\" onClick={(e) => startGame(e)}>Start Game</Button></Link> }\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6} className={classes.member}>{sessionMembers[2]}</Grid>\r\n                <Grid item xs={6} className={classes.member}>{sessionMembers[3]}</Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Room;\r\n","import axios from 'axios';\r\n// Open Trivia DB Categories\r\nconst categories = {\r\n    'General Knowledge': 9,\r\n    'Books': 10,\r\n    'Film': 11,\r\n    'Music': 12,\r\n    'Musicals & Plays': 13,\r\n    'Television': 14,\r\n    'Video Games': 15,\r\n    'Board Games': 16,\r\n    'Science and Nature': 17,\r\n    'Computers': 18,\r\n    'Mathematics': 19,\r\n    'Mythology': 20,\r\n    'Sports': 21,\r\n    'Geography': 22,\r\n    'History': 23,\r\n    'Politics': 24,\r\n    'Art': 25,\r\n    'Celebrities': 26,\r\n    'Animals': 27,\r\n    'Vehicles': 28,\r\n    'Comics': 29,\r\n    'Gadgets': 30,\r\n    'Japanese Anime & Manga': 31,\r\n    'Cartoon & Animation': 32\r\n\r\n};\r\n\r\n// Open Trivia API Calls\r\nconst getTriviaQuestions = async ({category, numQuestions=1, difficulty, type='multiple'}) => {\r\n    var url = `https://opentdb.com/api.php?amount=${numQuestions}`;\r\n    if (category && categories[category]) {\r\n        url += `&category=${categories[category]}`;\r\n    }\r\n    if (difficulty) {\r\n        url += `&difficulty=${difficulty}`;\r\n    }\r\n    url += `&type=${type}&encode=url3986`;\r\n    var response = await axios.get(url);\r\n\r\n    // TODO: This will be done on the server side and return a DTO\r\n    var results = response.data.results;\r\n    for (var i = 0; i < results.length; i++) {\r\n        results[i].question = decodeURIComponent(results[i].question);\r\n        results[i].answers = [];\r\n        var randomInsertIndex = randomInteger(0, 2);\r\n        for (var j = 0; j < results[i].incorrect_answers.length; j++) {\r\n            results[i].answers.push(decodeURIComponent(results[i].incorrect_answers[j]));\r\n        }\r\n        results[i].answers.splice(randomInsertIndex, 0, decodeURIComponent(results[i].correct_answer));\r\n    }\r\n    response.data.results = results;\r\n    return Promise.resolve(response);\r\n}\r\n\r\n// Returns an integer random number between min (included) and max (included):\r\nfunction randomInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst getCategoryOptions = (numOptions) => {\r\n    var options = new Set();\r\n    while (options.size !== numOptions) {\r\n        options.add(Object.keys(categories).find(key => categories[key] === randomInteger(9, 32)));\r\n    }\r\n    return options;\r\n}\r\n\r\n// Mock API helper functions\r\nconst joinRoom = async (name, room) => {\r\n    //call server, try to add person to room\r\n    console.log(`[JOINING ROOM] Name: ${name}, Room code: ${room}`);\r\n    return Promise.resolve({status: 200, data: {}});\r\n}\r\n\r\nconst getSessionMembers = async (room) => {\r\n    // Get all current room members from server\r\n    console.log(`[GETTING MEMBERS] Room code: ${room}`);\r\n    return Promise.resolve({\r\n        status: 200,\r\n        data: {\r\n            value: [\r\n                'Nik',\r\n                'Siena',\r\n                'Filip'\r\n            ]\r\n        }\r\n    });\r\n}\r\n\r\nexport {\r\n    getTriviaQuestions,\r\n    getCategoryOptions,\r\n    joinRoom,\r\n    getSessionMembers\r\n};"],"sourceRoot":""}