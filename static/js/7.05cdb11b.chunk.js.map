{"version":3,"sources":["../node_modules/@material-ui/core/esm/Paper/Paper.js","../node_modules/@material-ui/core/esm/Card/Card.js","components/game/GrabBag.js","components/ui/GameButton.js","components/game/Quickstarter.js","components/Game.js","Helper.js","../node_modules/@material-ui/core/esm/Typography/Typography.js"],"names":["Paper","React","props","ref","classes","className","_props$component","component","Component","_props$square","square","_props$elevation","elevation","_props$variant","variant","other","_objectWithoutProperties","_extends","clsx","root","outlined","concat","rounded","withStyles","theme","elevations","shadows","forEach","shadow","index","boxShadow","backgroundColor","palette","background","paper","color","text","primary","transition","transitions","create","borderRadius","shape","border","divider","name","Card","_props$raised","raised","overflow","makeStyles","removeLinkStyling","textDecoration","fontWeight","GrabBag","useStyles","questionText","height","width","questionCard","disabledQuestionCard","correctQuestionCard","wrongQuestionCard","GameButton","buttonText","buttonIndex","correctAnswer","showAnswer","useState","selected","setSelected","cardClass","setCardClass","determineCardClass","useEffect","Button","onClick","e","questionGrid","decodeEntities","decodeURIComponent","replace","Quickstarter","questions","setQuestions","currQuestion","setCurrQuestion","setShowAnswer","setCorrectAnswer","handleClick","ansIndex","answers","indexOf","correct_answer","console","log","length","setTimeout","populateDisplayQuestions","a","getTriviaQuestions","numQuestions","response","data","response_code","results","style","Grid","container","spacing","item","xs","Typography","padding","question","Game","minigame","players","setPlayers","roomCode","match","params","code","getSessionMembers","value","fetchData","map","player","i","key","categories","category","difficulty","type","url","axios","get","randomInsertIndex","randomInteger","j","incorrect_answers","push","splice","Promise","resolve","min","max","Math","floor","random","joinRoom","room","status","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","_props$align","align","_props$color","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variantMapping","variantMapping","capitalize","margin","typography","caption","button","overline","srOnly","position","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","main","colorSecondary","secondary","colorTextPrimary","colorTextSecondary","colorError","error","displayInline","displayBlock"],"mappings":"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","file":"static/js/7.05cdb11b.chunk.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  var elevations = {};\n  theme.shadows.forEach(function (shadow, index) {\n    elevations[\"elevation\".concat(index)] = {\n      boxShadow: shadow\n    };\n  });\n  return _extends({\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow')\n    },\n\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      border: \"1px solid \".concat(theme.palette.divider)\n    }\n  }, elevations);\n};\nvar Paper = React.forwardRef(function Paper(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$square = props.square,\n      square = _props$square === void 0 ? false : _props$square,\n      _props$elevation = props.elevation,\n      elevation = _props$elevation === void 0 ? 1 : _props$elevation,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'elevation' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"square\", \"elevation\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant === 'outlined' ? classes.outlined : classes[\"elevation\".concat(elevation)], !square && classes.rounded),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Paper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   */\n  elevation: chainPropTypes(PropTypes.number, function (props) {\n    var classes = props.classes,\n        elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning\n\n    if (classes === undefined) {\n      return null;\n    }\n\n    if (elevation != null && classes[\"elevation\".concat(elevation)] === undefined) {\n      return new Error(\"Material-UI: This elevation `\".concat(elevation, \"` is not implemented.\"));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, rounded corners are disabled.\n   */\n  square: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['elevation', 'outlined'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiPaper'\n})(Paper);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n      },\r\n}));\r\n\r\nfunction GrabBag(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n                \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GrabBag;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, Card } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n      },\r\n    questionText: {\r\n        height: '100%',\r\n        width: '100%'\r\n    },\r\n    questionCard: {\r\n        height: '150px',\r\n        width: '100%',\r\n        background: \"radial-gradient(circle at center, rgb(2, 204, 204) 0%, rgba(255,255,255,1) 100%)\",\r\n    },\r\n    disabledQuestionCard: {\r\n        height: '150px',\r\n        width: '100%',\r\n        background: \"radial-gradient(circle at center, rgb(2, 204, 204) 0%, rgba(255,255,255,0.5) 100%)\",\r\n    },\r\n    correctQuestionCard: {\r\n        height: '150px',\r\n        width: '100%',\r\n        background: \"radial-gradient(circle at center, green 0%, rgba(255,255,255,1) 100%)\",\r\n    },\r\n    wrongQuestionCard: {\r\n        height: '150px',\r\n        width: '100%',\r\n        background: \"radial-gradient(circle at center, red 0%, rgba(255,255,255,1) 100%)\",\r\n    },\r\n}));\r\n\r\nfunction GameButton(props) {\r\n    const classes = useStyles();\r\n    const buttonText = props.buttonText;\r\n    const buttonIndex = props.buttonIndex;\r\n    var correctAnswer = props.correctAnswer;\r\n    var showAnswer = props.showAnswer;\r\n    const [selected, setSelected] = useState(false);\r\n    const [cardClass, setCardClass] = useState();\r\n\r\n    const determineCardClass = () => {\r\n        if (showAnswer && correctAnswer === buttonIndex) {\r\n            setCardClass(classes.correctQuestionCard);\r\n        } else if (showAnswer && selected && (buttonIndex !== correctAnswer)) {\r\n            setCardClass(classes.wrongQuestionCard);\r\n        } else if (showAnswer && !selected) {\r\n            setCardClass(classes.disabledQuestionCard);\r\n        } else {\r\n            setCardClass(classes.questionCard);\r\n        }\r\n    }\r\n\r\n    // useEffect( () => {\r\n    //     const determineCardClass = () => {\r\n    //         console.log(props)\r\n    //         console.log(selected)\r\n    //         if (showAnswer && correctAnswer === buttonIndex) {\r\n    //             setCardClass(classes.correctQuestionCard);\r\n    //         } else if (showAnswer && selected && (buttonIndex !== correctAnswer)) {\r\n    //             setCardClass(classes.wrongQuestionCard);\r\n    //         } else {\r\n    //             setCardClass(classes.questionCard);\r\n    //         }\r\n    //     }\r\n    //     if (selected) {\r\n    //         determineCardClass();\r\n    //         setSelected(false);\r\n    //     }\r\n    // }, [selected])\r\n\r\n    const onClick = (e) => {\r\n        if (showAnswer) return;\r\n        setSelected(true);\r\n        props.onClick();\r\n        determineCardClass();\r\n    }\r\n\r\n    useEffect(() => {\r\n        determineCardClass();\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (correctAnswer === -1) {\r\n            setSelected(false);\r\n        }\r\n    }, [correctAnswer]);\r\n\r\n    return (\r\n        <div>\r\n            <Card className={cardClass}>\r\n                <Button className={classes.questionText} onClick={(e) => onClick(e)}>{buttonText}</Button>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameButton;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Button, Grid, Card, Typography } from '@material-ui/core';\r\nimport { getTriviaQuestions, getCategoryOptions } from '../../Helper';\r\nimport GameButton from '../ui/GameButton';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n    },\r\n    questionGrid: {\r\n    },\r\n    questionCard: {\r\n        height: '100%',\r\n        width: '100%',\r\n    },\r\n    questionText: {\r\n        height: '100%',\r\n        width: '100%'\r\n    },\r\n    correctQuestionCard: {\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundColor: 'green'\r\n    }\r\n}));\r\n\r\nfunction decodeEntities(text) {\r\n    var str = decodeURIComponent(text).replace(\"%2C\", \",\");\r\n\r\n    return str;\r\n}\r\n\r\nfunction Quickstarter(props) {\r\n    const classes = useStyles();\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currQuestion, setCurrQuestion] = useState(0);\r\n    const [showAnswer, setShowAnswer] = useState(false);\r\n    const [correctAnswer, setCorrectAnswer] = useState(-1);\r\n\r\n    const handleClick = (ansIndex) => {\r\n        setShowAnswer(true);\r\n        setCorrectAnswer((questions[currQuestion].answers.indexOf(decodeEntities(questions[currQuestion].correct_answer))));\r\n\r\n        // console.table(questions);\r\n        // console.log(\"currque:\" + currQuestion);\r\n        console.log(\"correct:\" + correctAnswer);\r\n        console.log(\"question: \" + decodeEntities(questions[currQuestion].answers[ansIndex]));\r\n        console.log(\"answer: \" + decodeEntities(questions[currQuestion].correct_answer));\r\n\r\n        if (decodeEntities(questions[currQuestion].answers[ansIndex]) === decodeEntities(questions[currQuestion].correct_answer)) {\r\n            console.log(\"correct\");\r\n            // TODO: Send to server to record points\r\n        } else {\r\n            console.log(\"incorrect\");\r\n        }\r\n        // TODO: This will need to be set either on a countdown or when all answers have been received from the players\r\n        if (currQuestion < questions.length - 1) {\r\n            setTimeout(() => {\r\n                setShowAnswer(false);\r\n                setCorrectAnswer(-1);\r\n                setCurrQuestion(currQuestion + 1);\r\n            }, 3000);\r\n        }\r\n        \r\n    }\r\n\r\n    const populateDisplayQuestions = async () => {\r\n        var response = await getTriviaQuestions({ numQuestions: 4 });\r\n        console.log(response)\r\n        if (response.data.response_code !== 0) {\r\n            // TODO: Handle error codes\r\n            console.log('Error retrieving questions from the API');\r\n        }\r\n        var results = response.data.results;\r\n        setQuestions(results);\r\n        \r\n    }\r\n\r\n\r\n\r\n    /*useEffect(() => {\r\n        const tick = setTimeout(() => {\r\n            populateDisplayQuestions();\r\n        }, 2000);\r\n        //return () => clearInterval(tick)\r\n    })*/\r\n    useEffect(() => {\r\n        populateDisplayQuestions();\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            { questions.length > 0 ?\r\n            <>\r\n            <div style={{ width: '100%', height: '30%'}}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6} className={classes.questionGrid}>\r\n                        {/* <Card className={showAnswer && correctAnswer === 0 ? classes.correctQuestionCard : classes.questionCard}>\r\n                            <Button className={classes.questionText} onClick={() => handleClick(0)}>{questions[currQuestion].answers[0]}</Button>\r\n                        </Card> */}\r\n                        <GameButton correctAnswer={correctAnswer} showAnswer={showAnswer} buttonIndex={0} buttonText={questions[currQuestion].answers[0]} onClick={() => handleClick(0)}></GameButton>\r\n                    </Grid>\r\n                    <Grid item xs={6} className={classes.questionGrid}>\r\n                        {/* <Card className={showAnswer && correctAnswer === 1 ? classes.correctQuestionCard : classes.questionCard}>\r\n                            <Button className={classes.questionText} onClick={() => handleClick(1)}>{questions[currQuestion].answers[1]}</Button>\r\n                        </Card> */}\r\n                        <GameButton correctAnswer={correctAnswer} showAnswer={showAnswer} buttonIndex={1} buttonText={questions[currQuestion].answers[1]} onClick={() => handleClick(1)}></GameButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <Typography variant='h4' style={{padding: 40}}>{questions[currQuestion].question}</Typography>\r\n            <div style={{ width: '100%', height: '30%' }}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6} className={classes.questionGrid}>\r\n                        {/* <Card className={showAnswer && correctAnswer === 2 ? classes.correctQuestionCard : classes.questionCard}>\r\n                            <Button className={classes.questionText} onClick={() => handleClick(2)}>{questions[currQuestion].answers[2]}</Button>\r\n                        </Card> */}\r\n                        <GameButton correctAnswer={correctAnswer} showAnswer={showAnswer} buttonIndex={2} buttonText={questions[currQuestion].answers[2]} onClick={() => handleClick(2)}></GameButton>\r\n                    </Grid>\r\n                    <Grid item xs={6} className={classes.questionGrid}>\r\n                        {/* <Card className={showAnswer && correctAnswer === 3 ? classes.correctQuestionCard : classes.questionCard}>\r\n                            <Button className={classes.questionText} onClick={() => handleClick(3)}>{questions[currQuestion].answers[3]}</Button>\r\n                        </Card> */}\r\n                        <GameButton correctAnswer={correctAnswer} showAnswer={showAnswer} buttonIndex={3} buttonText={questions[currQuestion].answers[3]} onClick={() => handleClick(3)}></GameButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            </>\r\n            : ''}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quickstarter;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Card, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GrabBag from './game/GrabBag';\r\nimport Quickstarter from './game/Quickstarter';\r\nimport { getSessionMembers } from '../Helper';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    removeLinkStyling: {\r\n        '&:link, &:visited, &:hover': {\r\n            color: 'inherit',\r\n            textDecoration: 'none',\r\n        },\r\n        '&:active': {\r\n            color: 'inherit',\r\n            fontWeight: 'bold',\r\n            textDecoration: 'none',\r\n        },\r\n      },\r\n}));\r\n\r\nfunction Game(props) {\r\n    const classes = useStyles();\r\n    const minigame = <Quickstarter/>;\r\n    const [players, setPlayers] = useState([]);\r\n    const roomCode = props.match.params.code;\r\n\r\n    useEffect(() => {\r\n        const fetchData = async (roomCode) => {\r\n            setPlayers((await getSessionMembers(roomCode)).data.value);\r\n        };\r\n\r\n        fetchData(roomCode);\r\n    }, [roomCode]);\r\n\r\n    return (\r\n        <div>\r\n            <div style={{width: '80vw'}}>\r\n            {minigame}\r\n            </div>\r\n            <Grid container spacing={3}>\r\n                {players.map((player, i) => \r\n                    <Grid item xs={3} key={i}>\r\n                        <Card>{player}</Card>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import axios from 'axios';\r\n// Open Trivia DB Categories\r\nconst categories = {\r\n    'General Knowledge': 9,\r\n    'Books': 10,\r\n    'Film': 11,\r\n    'Music': 12,\r\n    'Musicals & Plays': 13,\r\n    'Television': 14,\r\n    'Video Games': 15,\r\n    'Board Games': 16,\r\n    'Science and Nature': 17,\r\n    'Computers': 18,\r\n    'Mathematics': 19,\r\n    'Mythology': 20,\r\n    'Sports': 21,\r\n    'Geography': 22,\r\n    'History': 23,\r\n    'Politics': 24,\r\n    'Art': 25,\r\n    'Celebrities': 26,\r\n    'Animals': 27,\r\n    'Vehicles': 28,\r\n    'Comics': 29,\r\n    'Gadgets': 30,\r\n    'Japanese Anime & Manga': 31,\r\n    'Cartoon & Animation': 32\r\n\r\n};\r\n\r\n// Open Trivia API Calls\r\nconst getTriviaQuestions = async ({category, numQuestions=1, difficulty, type='multiple'}) => {\r\n    var url = `https://opentdb.com/api.php?amount=${numQuestions}`;\r\n    if (category && categories[category]) {\r\n        url += `&category=${categories[category]}`;\r\n    }\r\n    if (difficulty) {\r\n        url += `&difficulty=${difficulty}`;\r\n    }\r\n    url += `&type=${type}&encode=url3986`;\r\n    var response = await axios.get(url);\r\n\r\n    // TODO: This will be done on the server side and return a DTO\r\n    var results = response.data.results;\r\n    for (var i = 0; i < results.length; i++) {\r\n        results[i].question = decodeURIComponent(results[i].question);\r\n        results[i].answers = [];\r\n        var randomInsertIndex = randomInteger(0, 2);\r\n        for (var j = 0; j < results[i].incorrect_answers.length; j++) {\r\n            results[i].answers.push(decodeURIComponent(results[i].incorrect_answers[j]));\r\n        }\r\n        results[i].answers.splice(randomInsertIndex, 0, decodeURIComponent(results[i].correct_answer));\r\n    }\r\n    response.data.results = results;\r\n    return Promise.resolve(response);\r\n}\r\n\r\n// Returns an integer random number between min (included) and max (included):\r\nfunction randomInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst getCategoryOptions = (numOptions) => {\r\n    var options = new Set();\r\n    while (options.size !== numOptions) {\r\n        options.add(Object.keys(categories).find(key => categories[key] === randomInteger(9, 32)));\r\n    }\r\n    return options;\r\n}\r\n\r\n// Mock API helper functions\r\nconst joinRoom = async (name, room) => {\r\n    //call server, try to add person to room\r\n    console.log(`[JOINING ROOM] Name: ${name}, Room code: ${room}`);\r\n    return Promise.resolve({status: 200, data: {}});\r\n}\r\n\r\nconst getSessionMembers = async (room) => {\r\n    // Get all current room members from server\r\n    console.log(`[GETTING MEMBERS] Room code: ${room}`);\r\n    return Promise.resolve({\r\n        status: 200,\r\n        data: {\r\n            value: [\r\n                'Nik',\r\n                'Siena',\r\n                'Filip'\r\n            ]\r\n        }\r\n    });\r\n}\r\n\r\nexport {\r\n    getTriviaQuestions,\r\n    getCategoryOptions,\r\n    joinRoom,\r\n    getSessionMembers\r\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);"],"sourceRoot":""}