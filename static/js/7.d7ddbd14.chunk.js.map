{"version":3,"sources":["../node_modules/@material-ui/core/esm/Paper/Paper.js","../node_modules/@material-ui/core/esm/Card/Card.js","../../../src/ILogger.ts","../../../src/Utils.ts","../../../src/Errors.ts","../../../src/HttpClient.ts","../../../src/Loggers.ts","../node_modules/buffer/index.js","../../../src/TextMessageFormat.ts","../node_modules/@material-ui/core/esm/Typography/Typography.js","../../../src/NodeHttpClient.ts","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/isarray/index.js","../../../src/HandshakeProtocol.ts","../../../src/IHubProtocol.ts","../../../src/XhrHttpClient.ts","../../../src/DefaultHttpClient.ts","../../../src/HubConnection.ts","../../../src/Subject.ts","../../../src/ITransport.ts","../../../src/DefaultReconnectPolicy.ts","../../../src/AbortController.ts","../../../src/LongPollingTransport.ts","../../../src/ServerSentEventsTransport.ts","../../../src/WebSocketTransport.ts","../../../src/HttpConnection.ts","../../../src/JsonHubProtocol.ts","../../../src/HubConnectionBuilder.ts"],"names":["Paper","React","props","ref","classes","className","_props$component","component","Component","_props$square","square","_props$elevation","elevation","_props$variant","variant","other","_objectWithoutProperties","_extends","clsx","root","outlined","concat","rounded","withStyles","theme","elevations","shadows","forEach","shadow","index","boxShadow","backgroundColor","palette","background","paper","color","text","primary","transition","transitions","create","borderRadius","shape","border","divider","name","Card","_props$raised","raised","overflow","LogLevel","isRequired","val","undefined","Error","isIn","values","window","self","this","isBrowser","isWebWorker","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","num","toString","substr","length","formatArrayBuffer","ArrayBuffer","constructor","logger","transportName","httpClient","url","accessTokenFactory","content","logMessageContent","token","headers","log","Trace","getDataDetail","responseType","post","response","statusCode","ConsoleLogger","Information","instance","subject","observer","dispose","observers","indexOf","splice","cancelCallback","catch","_","minimumLogLevel","outputConsole","console","logLevel","message","Critical","error","Date","toISOString","Warning","warn","info","errorMessage","trueProto","prototype","__proto__","statusText","get","options","send","method","delete","getCookieString","_logLevel","_message","NullLogger","base64","require","ieee754","isArray","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","arg","encodingOrOffset","allocUnsafe","from","value","TypeError","array","byteOffset","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","len","checked","copy","buffer","type","fromObject","assertSize","size","i","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","n","m","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","call","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","utf8Write","blitBuffer","asciiWrite","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","fromByteArray","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","fromCharCode","apply","decodeCodePointsArray","exports","SlowBuffer","alloc","INSPECT_MAX_BYTES","global","foo","subarray","e","typedArraySupport","poolSize","_augment","Symbol","species","Object","defineProperty","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","list","pos","swap16","swap32","swap64","arguments","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","output","TextMessageFormat","RecordSeparator","parse","input","messages","split","pop","RecordSeparatorCode","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","Typography","_props$align","align","_props$color","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variantMapping","variantMapping","capitalize","margin","typography","caption","button","overline","srOnly","position","height","width","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","main","colorSecondary","secondary","colorTextPrimary","colorTextSecondary","colorError","displayInline","displayBlock","requestModule","XMLHttpRequest","requireFunc","cookieJar","jar","request","defaults","httpRequest","abortSignal","aborted","Promise","reject","resolve","requestBody","currentRequest","body","timeout","onabort","statusMessage","abort","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","LN2","module","writeHandshakeRequest","handshakeRequest","JSON","stringify","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","textData","substring","MessageType","xhr","open","withCredentials","setRequestHeader","keys","header","onload","status","responseText","onerror","ontimeout","HttpClient","NodeHttpClient","HubConnectionState","next","item","err","complete","subscribe","HttpTransportType","TransferFormat","connection","protocol","reconnectPolicy","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","handshakeProtocol","HandshakeProtocol","onreceive","processIncomingData","onclose","connectionClosed","callbacks","methods","closedCallbacks","reconnectingCallbacks","reconnectedCallbacks","invocationId","receivedHandshakeResponse","connectionState","Disconnected","connectionStarted","cachedPingMessage","writeMessage","Ping","HubConnection","connectionId","baseUrl","Reconnecting","startPromise","startWithStateTransitions","Connecting","Debug","startInternal","Connected","stopDuringStartError","handshakePromise","handshakeResolver","handshakeRejecter","transferFormat","version","sendMessage","cleanupTimeout","resetTimeoutPeriod","resetKeepAliveInterval","cleanupPingTimer","stop","stopPromise","stopInternal","Disconnecting","reconnectDelayHandle","clearTimeout","completeClose","stream","methodName","promiseQueue","streams","streamIds","invocationDescriptor","createStreamInvocation","args","cancelInvocation","createCancelInvocation","then","sendWithProtocol","invocationEvent","Completion","launchStreams","sendPromise","createInvocation","invoke","p","result","on","newMethod","off","handlers","removeIdx","callback","onreconnecting","onreconnected","processHandshakeResponse","parseMessages","Invocation","invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","pingServerHandle","setTimeout","features","inherentKeepAlive","timeoutHandle","serverTimeout","invocationMessage","cancelCallbacksWithError","reconnect","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","key","nonblocking","streamId","createCompletionMessage","createStreamItemMessage","replaceStreamingParams","argument","isObservable","StreamInvocation","id","CancelInvocation","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","retryDelays","retryContext","isAborted","pollAbort","AbortController","running","connect","Binary","pollOptions","signal","getAccessToken","updateHeaderToken","pollUrl","closeError","receiving","poll","pollAborted","raiseOnClose","deleteOptions","logMessage","eventSourceConstructor","encodeURIComponent","opened","Text","eventSource","cookies","Cookie","onmessage","close","onopen","webSocketConstructor","webSocket","isNode","binaryType","_event","event","ErrorEvent","readyState","OPEN","wasClean","reason","WebSocketModule","EventSourceModule","negotiateVersion","resolveUrl","WebSocket","EventSource","startInternalPromise","sendQueue","TransportSendQueue","transport","stopPromiseResolver","stopError","stopConnection","skipNegotiation","WebSockets","constructTransport","startTransport","negotiateResponse","redirects","getNegotiationResponse","ProtocolVersion","accessToken","createTransport","negotiateUrl","resolveNegotiateUrl","connectionToken","createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","resolveTransportOrError","ServerSentEvents","LongPolling","actualTransport","transportMatches","transferFormats","map","ex","document","aTag","createElement","href","executing","sendBufferedData","PromiseSource","transportResult","sendLoopPromise","sendLoop","bufferData","promise","concatBuffers","arrayBuffers","totalLength","reduce","resolver","rejecter","hubMessages","parsedMessage","isInvocationMessage","isStreamItemMessage","isCompletionMessage","assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","configureLogging","logging","mapping","parseLogLevel","withUrl","transportTypeOrOptions","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","DefaultReconnectPolicy","build"],"mappings":"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","file":"static/js/7.d7ddbd14.chunk.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  var elevations = {};\n  theme.shadows.forEach(function (shadow, index) {\n    elevations[\"elevation\".concat(index)] = {\n      boxShadow: shadow\n    };\n  });\n  return _extends({\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow')\n    },\n\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      border: \"1px solid \".concat(theme.palette.divider)\n    }\n  }, elevations);\n};\nvar Paper = React.forwardRef(function Paper(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$square = props.square,\n      square = _props$square === void 0 ? false : _props$square,\n      _props$elevation = props.elevation,\n      elevation = _props$elevation === void 0 ? 1 : _props$elevation,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'elevation' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"square\", \"elevation\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant === 'outlined' ? classes.outlined : classes[\"elevation\".concat(elevation)], !square && classes.rounded),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Paper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   */\n  elevation: chainPropTypes(PropTypes.number, function (props) {\n    var classes = props.classes,\n        elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning\n\n    if (classes === undefined) {\n      return null;\n    }\n\n    if (elevation != null && classes[\"elevation\".concat(elevation)] === undefined) {\n      return new Error(\"Material-UI: This elevation `\".concat(elevation, \"` is not implemented.\"));\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, rounded corners are disabled.\n   */\n  square: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['elevation', 'outlined'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiPaper'\n})(Paper);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\n\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\";\r\n    }\r\n\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined, content: string | ArrayBuffer, logMessageContent: boolean): Promise<void> {\r\n    let headers;\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n        responseType,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0 && this.subject.cancelCallback) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public outputConsole: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n        this.outputConsole = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.outputConsole.error(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.outputConsole.warn(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.outputConsole.info(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.outputConsole.log(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: { [key: string]: string };\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // tslint:disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport * as Request from \"@types/request\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nlet requestModule: Request.RequestAPI<Request.Request, Request.CoreOptions, Request.RequiredUriUrl>;\r\nif (typeof XMLHttpRequest === \"undefined\") {\r\n    // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n    // @ts-ignore: TS doesn't know about these names\r\n    const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n    requestModule = requireFunc(\"request\");\r\n}\r\n\r\n/** @private */\r\nexport class NodeHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n    private readonly request: typeof requestModule;\r\n    private readonly cookieJar: Request.CookieJar;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        if (typeof requestModule === \"undefined\") {\r\n            throw new Error(\"The 'request' module could not be loaded.\");\r\n        }\r\n\r\n        this.logger = logger;\r\n        this.cookieJar = requestModule.jar();\r\n        this.request = requestModule.defaults({ jar: this.cookieJar });\r\n    }\r\n\r\n    public send(httpRequest: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (httpRequest.abortSignal) {\r\n            if (httpRequest.abortSignal.aborted) {\r\n                return Promise.reject(new AbortError());\r\n            }\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n\r\n            let requestBody: Buffer | string;\r\n            if (isArrayBuffer(httpRequest.content)) {\r\n                requestBody = Buffer.from(httpRequest.content);\r\n            } else {\r\n                requestBody = httpRequest.content || \"\";\r\n            }\r\n\r\n            const currentRequest = this.request(httpRequest.url!, {\r\n                body: requestBody,\r\n                // If binary is expected 'null' should be used, otherwise for text 'utf8'\r\n                encoding: httpRequest.responseType === \"arraybuffer\" ? null : \"utf8\",\r\n                headers: {\r\n                    // Tell auth middleware to 401 instead of redirecting\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...httpRequest.headers,\r\n                },\r\n                method: httpRequest.method,\r\n                timeout: httpRequest.timeout,\r\n            },\r\n            (error, response, body) => {\r\n                if (httpRequest.abortSignal) {\r\n                    httpRequest.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (error) {\r\n                    if (error.code === \"ETIMEDOUT\") {\r\n                        this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                        reject(new TimeoutError());\r\n                    }\r\n                    this.logger.log(LogLevel.Warning, `Error from HTTP request. ${error}`);\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                if (response.statusCode >= 200 && response.statusCode < 300) {\r\n                    resolve(new HttpResponse(response.statusCode, response.statusMessage || \"\", body));\r\n                } else {\r\n                    reject(new HttpError(response.statusMessage || \"\", response.statusCode || 0));\r\n                }\r\n            });\r\n\r\n            if (httpRequest.abortSignal) {\r\n                httpRequest.abortSignal.onabort = () => {\r\n                    currentRequest.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.cookieJar.getCookieString(url);\r\n    }\r\n}\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data) || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer | Buffer} input A string, ArrayBuffer, or Buffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer | Buffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { NodeHttpClient } from \"./NodeHttpClient\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this.httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            this.httpClient = new NodeHttpClient(logger);\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this.httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly cachedPingMessage: string | ArrayBuffer;\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private readonly reconnectPolicy?: IRetryPolicy;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private invocationId: number;\r\n\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectingCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectedCallbacks: Array<(connectionId?: string) => void>;\r\n\r\n    private receivedHandshakeResponse: boolean;\r\n    private handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private handshakeRejecter!: (reason?: any) => void;\r\n    private stopDuringStartError?: Error;\r\n\r\n    private connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private startPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private reconnectDelayHandle?: any;\r\n    private timeoutHandle?: any;\r\n    private pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.reconnectPolicy = reconnectPolicy;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.reconnectingCallbacks = [];\r\n        this.reconnectedCallbacks = [];\r\n        this.invocationId = 0;\r\n        this.receivedHandshakeResponse = false;\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n\r\n        this.cachedPingMessage = this.protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this.connectionState !== HubConnectionState.Disconnected && this.connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this.startPromise = this.startWithStateTransitions();\r\n        return this.startPromise;\r\n    }\r\n\r\n    private async startWithStateTransitions(): Promise<void> {\r\n        if (this.connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Connecting;\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this.startInternal();\r\n\r\n            this.connectionState = HubConnectionState.Connected;\r\n            this.connectionStarted = true;\r\n            this.logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async startInternal() {\r\n        this.stopDuringStartError = undefined;\r\n        this.receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this.handshakeResolver = resolve;\r\n            this.handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this.protocol.name,\r\n                version: this.protocol.version,\r\n            };\r\n\r\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this.cleanupTimeout();\r\n            this.resetTimeoutPeriod();\r\n            this.resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this.stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                throw this.stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this.cleanupTimeout();\r\n            this.cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this.startPromise;\r\n\r\n        this.stopPromise = this.stopInternal();\r\n        await this.stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private stopInternal(error?: Error): Promise<void> {\r\n        if (this.connectionState === HubConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise!;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this.reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this.logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this.reconnectDelayHandle);\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            this.completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n        this.stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args, streamIds);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this.sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this.launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private sendMessage(message: any) {\r\n        this.resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private sendWithProtocol(message: any) {\r\n        return this.sendMessage(this.protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const sendPromise = this.sendWithProtocol(this.createInvocation(methodName, args, true, streamIds));\r\n\r\n        this.launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this.callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this.callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this.launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void) {\r\n        if (callback) {\r\n            this.reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // tslint:disable-next-line:no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this.stopPromise = this.stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resetTimeoutPeriod();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this.handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private resetKeepAliveInterval() {\r\n        this.cleanupPingTimer();\r\n        this.pingServerHandle = setTimeout(async () => {\r\n            if (this.connectionState === HubConnectionState.Connected) {\r\n                try {\r\n                    await this.sendMessage(this.cachedPingMessage);\r\n                } catch {\r\n                    // We don't care about the error. It should be seen elsewhere in the client.\r\n                    // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                    this.cleanupPingTimer();\r\n                }\r\n            }\r\n        }, this.keepAliveIntervalInMilliseconds);\r\n    }\r\n\r\n    private resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this.stopPromise = this.stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        this.logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this.stopDuringStartError = this.stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this.handshakeResolver) {\r\n            this.handshakeResolver();\r\n        }\r\n\r\n        this.cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.completeClose(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected && this.reconnectPolicy) {\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.reconnect(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected) {\r\n            this.completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private completeClose(error?: Error) {\r\n        if (this.connectionStarted) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.connectionStarted = false;\r\n\r\n            try {\r\n                this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this.logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this.completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this.onreconnecting) {\r\n            try {\r\n                this.reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this.logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this.reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.startInternal();\r\n\r\n                this.connectionState = HubConnectionState.Connected;\r\n                this.logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this.onreconnected) {\r\n                    try {\r\n                        this.reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this.logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                    this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect attempt. Done reconnecting.\");\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this.logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this.completeClose();\r\n    }\r\n\r\n    private getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this.reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error);\r\n            });\r\n    }\r\n\r\n    private cleanupPingTimer(): void {\r\n        if (this.pingServerHandle) {\r\n            clearTimeout(this.pingServerHandle);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const invocationId = this.invocationId;\r\n            this.invocationId++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private launchStreams(streams: Array<IStreamResult<any>>, promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // tslint:disable-next-line:forin\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private replaceStreamingParams(args: any[]): [Array<IStreamResult<any>>, string[]] {\r\n        const streams: Array<IStreamResult<any>> = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this.isObservable(argument)) {\r\n                const streamId = this.invocationId;\r\n                this.invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this.invocationId;\r\n        this.invocationId++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: invocationId.toString(),\r\n            streamIds,\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly retryDelays: Array<number | null>;\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this.retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this.retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly pollAbort: AbortController;\r\n\r\n    private url?: string;\r\n    private running: boolean;\r\n    private receiving?: Promise<void>;\r\n    private closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n\r\n        this.running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 100000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.getAccessToken();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.receiving = this.poll(this.url, pollOptions);\r\n    }\r\n\r\n    private async getAccessToken(): Promise<string | null> {\r\n        if (this.accessTokenFactory) {\r\n            return await this.accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.getAccessToken();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this.closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this.raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this.running = false;\r\n        this.pollAbort.abort();\r\n\r\n        try {\r\n            await this.receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: {},\r\n            };\r\n            const token = await this.getAccessToken();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url!, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this.raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this.closeError) {\r\n                logMessage += \" Error: \" + this.closeError;\r\n            }\r\n            this.logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this.closeError);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, Platform, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly eventSourceConstructor: EventSourceConstructor;\r\n    private eventSource?: EventSource;\r\n    private url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n        this.eventSourceConstructor = eventSourceConstructor;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this.url = url;\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: true });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this.httpClient.getCookieString(url);\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: true, headers: { Cookie: cookies } } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this.close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: MessageEvent) => {\r\n                    const error = new Error(e.data || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private readonly httpClient: HttpClient;\r\n    private webSocket?: WebSocket;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n        this.httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this.httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode && cookies) {\r\n                // Only pass cookies when in non-browser environments\r\n                webSocket = new this.webSocketConstructor(url, undefined, {\r\n                    headers: {\r\n                        Cookie: `${cookies}`,\r\n                    },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this.webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this.webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = new Error(\"There was an error with the transport.\");\r\n                }\r\n\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this.close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = new Error(\"There was an error with the transport.\");\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this.close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(event?: CloseEvent): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this.webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this.webSocket.onclose = () => {};\r\n            this.webSocket.onmessage = () => {};\r\n            this.webSocket.onerror = () => {};\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (event && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting \",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\nlet WebSocketModule: any = null;\r\nlet EventSourceModule: any = null;\r\nif (Platform.isNode && typeof require !== \"undefined\") {\r\n    // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n    // @ts-ignore: TS doesn't know about these names\r\n    const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n    WebSocketModule = requireFunc(\"ws\");\r\n    EventSourceModule = requireFunc(\"eventsource\");\r\n}\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport?: ITransport;\r\n    private startInternalPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n    private stopPromiseResolver!: (value?: PromiseLike<void>) => void;\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n    private sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent || false;\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (WebSocketModule) {\r\n                options.WebSocket = WebSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof EventSourceModule !== \"undefined\") {\r\n                options.EventSource = EventSourceModule;\r\n            }\r\n        }\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n        this.options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startInternalPromise = this.startInternal(transferFormat);\r\n        await this.startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this.connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this.stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this.connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this.logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this.connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this.sendQueue) {\r\n            this.sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this.sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise;\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnecting;\r\n\r\n        this.stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this.stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this.stopInternal(error);\r\n        await this.stopPromise;\r\n    }\r\n\r\n    private async stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this.stopError = error;\r\n\r\n        try {\r\n            await this.startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this.stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n            this.stopConnection();\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnecting || this.connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this.logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this.connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        let headers;\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                headers = {\r\n                    [\"Authorization\"]: `Bearer ${token}`,\r\n                };\r\n            }\r\n        }\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate ${response.statusCode}`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this.resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed: ${transportOrError}`);\r\n            } else if (this.isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this.getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this.createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this.startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(`${endpoint.transport} failed: ${ex}`);\r\n\r\n                    if (this.connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this.logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this.options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket);\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this.options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this.stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this.options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this.options.EventSource)) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new Error(`'${HttpTransportType[transport]}' is not supported in your environment.`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this.constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new Error(`'${HttpTransportType[transport]}' is disabled by the client.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private stopConnection(error?: Error): void {\r\n        this.logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n        this.stopError = undefined;\r\n\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Connecting) {\r\n            this.logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection hasn't yet left the in the connecting state.`);\r\n            return;\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this.stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this.sendQueue) {\r\n            this.sendQueue.stop().catch((e) => {\r\n                this.logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this.sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.connectionStarted) {\r\n            this.connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this.negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private buffer: any[] = [];\r\n    private sendBufferedData: PromiseSource;\r\n    private executing: boolean = true;\r\n    private transportResult?: PromiseSource;\r\n    private sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly transport: ITransport) {\r\n        this.sendBufferedData = new PromiseSource();\r\n        this.transportResult = new PromiseSource();\r\n\r\n        this.sendLoopPromise = this.sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this.bufferData(data);\r\n        if (!this.transportResult) {\r\n            this.transportResult = new PromiseSource();\r\n        }\r\n        return this.transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.executing = false;\r\n        this.sendBufferedData.resolve();\r\n        return this.sendLoopPromise;\r\n    }\r\n\r\n    private bufferData(data: string | ArrayBuffer): void {\r\n        if (this.buffer.length && typeof(this.buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this.buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this.buffer.push(data);\r\n        this.sendBufferedData.resolve();\r\n    }\r\n\r\n    private async sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this.sendBufferedData.promise;\r\n\r\n            if (!this.executing) {\r\n                if (this.transportResult) {\r\n                    this.transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this.sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this.transportResult!;\r\n            this.transportResult = undefined;\r\n\r\n            const data = typeof(this.buffer[0]) === \"string\" ?\r\n                this.buffer.join(\"\") :\r\n                TransportSendQueue.concatBuffers(this.buffer);\r\n\r\n            this.buffer.length = 0;\r\n\r\n            try {\r\n                await this.transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private resolver?: () => void;\r\n    private rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this.resolver, this.rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this.resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this.rejecter!(reason);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/en-us/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/en-us/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"],"sourceRoot":""}